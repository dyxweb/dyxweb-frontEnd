(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{1208:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});a(r(1));var t=a(r(1209));function a(e){return e&&e.__esModule?e:{default:e}}n.default={allScreen:[],partScreen:[{exact:!0,path:"/category/func/:funcname",component:t.default}]}},1209:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t,a=f(r(64)),l=function(){function e(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n}}();r(63);var i=f(r(1)),u=f(r(44)),d=f(r(156)),o=f(r(137)),c=f(r(157)),p=f(r(1210)),s=f(r(1225));function f(e){return e&&e.__esModule?e:{default:e}}function v(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function h(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var y=new c.default.Converter,b=(0,u.default)(s.default)(t=function(e){function n(){var e,r,t;v(this,n);for(var l=arguments.length,i=Array(l),u=0;u<l;u++)i[u]=arguments[u];return r=t=h(this,(e=n.__proto__||Object.getPrototypeOf(n)).call.apply(e,[this].concat(i))),t.copyCode=function(e){var n=e&&e.innerText;if(navigator.clipboard)navigator.clipboard.writeText(n).then((function(){a.default.success("复制成功")}),(function(e){a.default.error("复制失败")}));else{var r=document.createElement("textarea");r.value=n,r.style.position="fixed",document.body.appendChild(r),r.focus(),r.select();try{document.execCommand("copy");a.default.success("复制成功")}catch(e){a.default.error("复制失败")}document.body.removeChild(r)}},t.hightLight=function(){var e=document.getElementById("category-md").getElementsByTagName("pre"),n=document.createElement("div");n.setAttribute("class","pre-code"),n.innerText="复制",(Array.from(e)||[]).forEach((function(e){e.setAttribute("style","position: relative"),e.appendChild(n),d.default.highlightBlock(e)})),Array.from(document.querySelectorAll(".pre-code")).forEach((function(e){return e.addEventListener("click",(function(){return t.copyCode(e.previousSibling)}))}))},h(t,r)}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),l(n,[{key:"componentDidMount",value:function(){this.hightLight()}},{key:"componentDidUpdate",value:function(){this.hightLight()}},{key:"componentWillUnMount",value:function(){Array.from(document.querySelectorAll(".pre-code")).removeEventListener("click",this.copyCode)}},{key:"render",value:function(){var e=(0,o.default)(this.props,"match.params.funcname")||"generateTree",n=(0,o.default)(p.default,[e]);return i.default.createElement("div",{styleName:"category-md",dangerouslySetInnerHTML:{__html:y.makeHtml(n)},id:"category-md"})}}]),n}(i.default.Component))||t;n.default=b},1210:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=b(r(1211)),a=b(r(1212)),l=b(r(1213)),i=b(r(1214)),u=b(r(1215)),d=b(r(1216)),o=b(r(1217)),c=b(r(1218)),p=b(r(1219)),s=b(r(1220)),f=b(r(1221)),v=b(r(1222)),h=b(r(1223)),y=b(r(1224));function b(e){return e&&e.__esModule?e:{default:e}}n.default={generateTree:t.default,mapCategoryData:a.default,filterCategoryData:l.default,deleteAppointData:i.default,getAppointLevelCategoryData:u.default,getAppointLevelAllData:d.default,getAllData:o.default,findParentId:c.default,getLevelCount:p.default,mapCategoryDataWithLevelInfo:s.default,getLastLevelData:v.default,isLastLevelKey:f.default,addTreeNode:h.default,addUniqueTreeKey:y.default}},1211:function(e,n,r){"use strict";r.r(n),n.default="## 平铺数据转为tree数据\r\n```\r\n// value属性为唯一标识的属性， parentId为关联父节点的属性\r\nconst data = [\r\n  { label: '1', value: '1' },\r\n  { label: '2-1', value: '2-1', parentId: '2' },\r\n  { label: '1-1', value: '1-1', parentId: '1' },\r\n  { label: '3', value: '3' },\r\n  { label: '3-1-2-1', value: '3-1-2-1', parentId: '3-1-2' },\r\n  { label: '3-1', value: '3-1', parentId: '3' },\r\n  { label: '3-2', value: '3-2', parentId: '3' },\r\n  { label: '2', value: '2' },\r\n  { label: '3-1-1', value: '3-1-1', parentId: '3-1' },\r\n  { label: '3-1-2', value: '3-1-2', parentId: '3-1' },\r\n  { label: '3-1-1-1', value: '3-1-1-1', parentId: '3-1-1' },\r\n  { label: '1-1-1', value: '1-1-1', parentId: '1-1'},\r\n];\r\n\r\n/*\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* parentId 数据所关联的父节点的值\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\nconst generateTree = (data, parentId, uniqueKey, relativeKey) => {\r\n  return data.filter(item => {\r\n    if (item[relativeKey] === parentId) {\r\n      item.children = generateTree(data, item[uniqueKey], uniqueKey, relativeKey)\r\n      return true\r\n    }\r\n    return false\r\n  })\r\n}\r\n\r\nconsole.log(generateTree(data, undefined, 'value', 'parentId'));\r\n\r\n/*\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* parentId 数据所关联的父节点的值\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\n const generateTree = (data, parentId, uniqueKey, relativeKey) => {\r\n   return data.filter(item => {\r\n     if (item[relativeKey] !== parentId) {\r\n       let parent = data.find(parent => parent[uniqueKey] === item[relativeKey])\r\n       if (!parent.children) parent.children = []\r\n       parent.children.push(item)\r\n       return false\r\n     }\r\n     return true\r\n   })\r\n }\r\n\r\nconsole.log(generateTree(data, undefined, 'value', 'parentId'));\r\n\r\n/*\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* parentId 数据所关联的父节点的值\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\n const generateTree = (data, parentId, uniqueKey, relativeKey) => {\r\n   let parentObj = {}\r\n   return data.filter(item => {\r\n     if (item[relativeKey] !== parentId) {\r\n       if (!parentObj[item.parentId]) {\r\n         parentObj[item[relativeKey]] = data.find(parent => parent[uniqueKey] === item[relativeKey])\r\n         parentObj[item[relativeKey]].children = []\r\n       }\r\n       parentObj[item[relativeKey]].children.push(item)\r\n       return false\r\n     }\r\n     return true\r\n   })\r\n }\r\n\r\nconsole.log(generateTree(data, undefined, 'value', 'parentId'));\r\n\r\n\r\n/\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* parentId 数据所关联的父节点的值\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\n const generateTree = (data, parentId, uniqueKey, relativeKey) => {\r\n   let menuObj = {}\r\n   data.forEach(item => {\r\n     item.children = []\r\n     menuObj[item[uniqueKey]] = item\r\n   })\r\n   return data.filter(item => {\r\n     if (item[relativeKey] !== parentId) {\r\n       menuObj[item[relativeKey]].children.push(item)\r\n       return false\r\n     }\r\n     return true\r\n   })\r\n }\r\n\r\nconsole.log(generateTree(data, undefined, 'value', 'parentId'));\r\n\r\n/*\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\nconst generateTree = (data, uniqueKey, relativeKey) => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const treeData = []; // 最后返回的tree结构数据\r\n    const temptree = {}; // 中间状态的数据\r\n    const hasChildData = []; // data中添加children属性后的数据\r\n    data.forEach(item => {\r\n      if (!temptree[item[uniqueKey]]) {\r\n        let temp = item;\r\n        temp.children = [];\r\n        temptree[item[uniqueKey]] = temp;\r\n        hasChildData.push(temp);\r\n      }\r\n    });\r\n    hasChildData.forEach(item => {\r\n      // 如果有父节点则插入对应的children中\r\n      if (temptree[item[relativeKey]]) {\r\n        temptree[item[relativeKey]].children.push(temptree[item[uniqueKey]])\r\n      } else {\r\n        // 无父节点则直接插入最终的数据中\r\n        treeData.push(temptree[item[uniqueKey]]);\r\n      }\r\n    });\r\n    return treeData;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\nconsole.log(JSON.stringify(\r\n  generateTree(data, 'value', 'parentId'),\r\n  null,\r\n  2\r\n));\r\n```\r\n### 运行速度最快\r\n```\r\n/*\r\n* 运行速度最快，一次循环  时间复杂度为 O(n)\r\n* data:array 数组内部元素为对象，需要有后续两个参数对应的属性，relativeKey属性的值可以为空\r\n* uniqueKey: string 数组中每一项对象中唯一的标识所对应的属性\r\n* relativeKey: string 数组中每一项对象中关联父节点所对应的属性\r\n*/\r\nconst generateTree = (data, uniqueKey, relativeKey) => {\r\n  const objMap = {}\r\n  const result = []\r\n  for(const item of data) {\r\n    const id = item[uniqueKey];\r\n    const parentId = item[relativeKey];\r\n    objMap[id] = {...objMap[id], ...item}\r\n    const treeItem = objMap[id]\r\n    if (parentId === undefined) {\r\n      result.push(treeItem)\r\n    } else {\r\n      if(!objMap[parentId]) {\r\n        objMap[parentId] = {};\r\n      }\r\n      if(!objMap[parentId].children) {\r\n        objMap[parentId].children = [];\r\n      }\r\n      objMap[parentId].children.push(treeItem)\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\nconsole.log(generateTree(data, 'value', 'parentId'));\r\n```"},1212:function(e,n,r){"use strict";r.r(n),n.default='## 深层次遍历数据\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * changeLabelList:array[array] 所需要将原数据中的属性变成期望属性的对应关系，内部数组第一项为源数据中的属性，第二项是新数据的属性\r\n * copyPrev:boolean 是否要保留原数据中的所有属性\r\n */\r\nconst mapCategoryData = (data, changeLabelList, copyPrev = true) => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const newData = [];\r\n    data.forEach(item => {\r\n      let obj = copyPrev ? { ...item } : {};\r\n      changeLabelList.forEach(item1 => {\r\n        obj[item1[1]] = item[item1[0]];\r\n      });\r\n      if (Array.isArray(item.children) && item.children.length > 0) {\r\n        const tempData = mapCategoryData(item.children, changeLabelList, copyPrev);\r\n        obj.children = tempData;\r\n      }\r\n      newData.push(obj);\r\n    });\r\n    return newData;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconsole.log(JSON.stringify(\r\n  mapCategoryData(\r\n    categoryData,\r\n    [\r\n      [\'label\', \'name\'],\r\n      [\'value\', \'id\'],\r\n    ],\r\n    true\r\n  ),\r\n  null,\r\n  2\r\n));\r\n```'},1213:function(e,n,r){"use strict";r.r(n),n.default='## 根据所有最后一级的唯一值得到想要的类目结构数据\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * values:array 所选中的最后一级的values(必须是最后一级)\r\n * uniqueKey:string 数组中每一项对象中唯一的标识所对应的属性\r\n * type: select or filter select根据values生成选择的类目数据， filter根据values生成过滤后的类目数据\r\n */\r\nconst filterCategoryData = (data, values, uniqueKey, type = \'select\') => {\r\n  if (Array.isArray(values) && values.length > 0) {\r\n    const newValues = Array.isArray(values) ? values : [values];\r\n    const newData = [];\r\n    data.forEach(item => {\r\n      let obj = {};\r\n      if (Array.isArray(item.children) && item.children.length > 0) {\r\n        const tempData = filterCategoryData(item.children, newValues, uniqueKey, type);\r\n        obj = {\r\n          ...item,\r\n          children: tempData,\r\n        };\r\n        // 当children不为空时才保留该数据\r\n        if (obj.children.length > 0) {\r\n          newData.push(obj);\r\n        }\r\n      } else if (\r\n        type === \'select\' ? newValues.includes(item[uniqueKey]) : !newValues.includes(item[uniqueKey])\r\n      ) {\r\n        obj = {\r\n          ...item,\r\n        };\r\n        newData.push(obj);\r\n      }\r\n    });\r\n    return newData;\r\n  } else {\r\n    return data;\r\n  }\r\n};\r\n\r\nconsole.log(JSON.stringify(\r\n  filterCategoryData(categoryData, [\'1-1-1\', \'3-1-2-1\', \'3-2\'], \'value\', \'select\'),\r\n  null,\r\n  2\r\n));\r\n```'},1214:function(e,n,r){"use strict";r.r(n),n.default='## 过滤掉类目数据中指定删除的值\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * values:array 所要删除的values\r\n * uniqueKey:string 数组中每一项对象中唯一的标识所对应的属性\r\n */\r\nconst deleteAppointData = (data, values, uniqueKey) => {\r\n  const newValues = values ? Array.isArray(values) ? values : [values] : [];\r\n  if (values.length > 0) {\r\n    const newData = [];\r\n    data.forEach(item => {\r\n      let obj = { ...item };\r\n      if (!newValues.includes(item[uniqueKey])) {\r\n        if (Array.isArray(item.children) && item.children.length > 0) {\r\n          const tempData = deleteAppointData(item.children, newValues, uniqueKey);\r\n          obj.children = tempData;\r\n        }\r\n        newData.push(obj);\r\n      }\r\n    });\r\n    return newData;\r\n  } else {\r\n    return data;\r\n  }\r\n}\r\n\r\nconsole.log(JSON.stringify(\r\n  deleteAppointData(\r\n    categoryData,\r\n    [\'2\', \'3-1-1\'],\r\n    \'value\'\r\n  ),\r\n  null,\r\n  2\r\n));\r\n```'},1215:function(e,n,r){"use strict";r.r(n),n.default='## 获取截止到指定层级的数据\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * appointLevel:number 所要获取到数据的截止层级\r\n */\r\nconst getAppointLevelCategoryData = (data, appointLevel, currentLevel = 1) => {\r\n  const newData = [];\r\n  data.forEach(item => {\r\n    let obj = {};\r\n    if (Array.isArray(item.children) && item.children.length > 0) {\r\n      if (currentLevel < appointLevel) {\r\n        const tempData = getAppointLevelCategoryData(item.children, appointLevel, currentLevel + 1);\r\n        obj = {\r\n          ...item,\r\n          children: tempData,\r\n        };\r\n      } else {\r\n        obj = {\r\n          ...item,\r\n          children: [],\r\n        };\r\n      }\r\n    } else {\r\n      obj = {\r\n        ...item,\r\n      };\r\n    }\r\n    newData.push(obj);\r\n  });\r\n  return newData;\r\n}\r\n\r\nconsole.log(JSON.stringify(\r\n  getAppointLevelCategoryData(categoryData, 2),\r\n  null,\r\n  2\r\n))\r\n```'},1216:function(e,n,r){"use strict";r.r(n),n.default='## 获取指定层级的所有内容\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * appointLevel:number 所要获取到数据的截止层级\r\n */\r\nconst getAppointLevelAllData = (data, appointLevel) => {\r\n  const newData = [];\r\n  const deep = (innerData, level) => {\r\n    innerData.forEach(item => {\r\n      if (level === appointLevel) {\r\n        newData.push(item);\r\n      }\r\n      if (Array.isArray(item.children) && item.children.length > 0 && level < appointLevel) {\r\n        deep(item.children, level + 1);\r\n      }\r\n    });\r\n  };\r\n  deep(data, 1);\r\n  return newData;\r\n}\r\n\r\nconsole.log(getAppointLevelAllData(categoryData, 3));\r\n```'},1217:function(e,n,r){"use strict";r.r(n),n.default='## 获取所有层级的内容\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n */\r\nconst getAllData = data => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const allData = [];\r\n    const deep = innerData => {\r\n      innerData.forEach(item => {\r\n        allData.push(item);\r\n        if (Array.isArray(item.children) && item.children.length > 0) {\r\n          deep(item.children);\r\n        }\r\n      });\r\n    };\r\n    deep(data);\r\n    return allData;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconsole.log(getAllData(categoryData));\r\n```'},1218:function(e,n,r){"use strict";r.r(n),n.default='## 指定一个唯一值找到对应节点的祖先节点id\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * value: 简单数据类型 所要查找属性的值\r\n * uniqueKey:string 所要查找的属性\r\n */\r\nconst findParentId = (data, value, uniqueKey) => {\r\n  const path = []; // 从祖先到指定节点的数组\r\n  let findFlag = false;\r\n  const deep = (array, innerValue) => {\r\n    array.forEach(item => {\r\n      if (findFlag) return;\r\n      path.push(item[uniqueKey]); // 每一次循环都将唯一值push到数组中\r\n      if (item[uniqueKey] === innerValue) {\r\n        findFlag = true;\r\n      } else if (Array.isArray(item.children) && item.children.length) {\r\n        deep(item.children, innerValue);\r\n      } else {\r\n        path.pop(); // 如果是最后一层且不相同则将刚push进去的值去除\r\n      }\r\n    });\r\n    if (!findFlag) {\r\n      path.pop(); // 当有children时调用deep函数结束时且还是没有找到相同的id则将有children的item的value从path中去除\r\n    }\r\n  };\r\n  deep(data, value);\r\n  return path;\r\n}\r\n\r\nconsole.log(findParentId(categoryData, \'3-1-1-1\', \'value\'));\r\n```'},1219:function(e,n,r){"use strict";r.r(n),n.default='## 统计类目结构数据相同层级的数量\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n */\r\nconst getLevelCount = data => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const levelData = {};\r\n    const deep = (innerData, level) => {\r\n      return innerData.forEach(item => {\r\n        typeof(levelData[level]) === \'undefined\' ? levelData[level] = 1 : levelData[level] += 1;\r\n        if (item.children && item.children.length > 0) {\r\n          deep(item.children, level + 1);\r\n        }\r\n      });\r\n    };\r\n    deep(data, 1);\r\n    return levelData;\r\n  } else {\r\n    return {};\r\n  }\r\n}\r\n\r\nconsole.log(getLevelCount(categoryData));\r\n```'},1220:function(e,n,r){"use strict";r.r(n),n.default='## 操作类目结构数据添加当前项是哪一层级以及是哪一层级的第几项\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n */\r\nconst mapCategoryDataWithLevelInfo = data => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const levelData = {};\r\n    const deep = (innerData, level = 1) => {\r\n      const newData = [];\r\n      innerData.forEach(item => {\r\n        typeof(levelData[level]) === \'undefined\' ? levelData[level] = 1 : levelData[level] += 1;\r\n        let obj = {\r\n          ...item,\r\n          sameLevelSort: levelData[level], // 当前项是该层级中的第几个\r\n          currentLevel: level, // 当前项属于的层级\r\n        };\r\n        if (Array.isArray(item.children) && item.children.length > 0) {\r\n          const tempData = deep(item.children, level + 1);\r\n          obj.children = tempData;\r\n        }\r\n        newData.push(obj);\r\n      });\r\n      return newData;\r\n    };\r\n    return deep(data);\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconsole.log(JSON.stringify(mapCategoryDataWithLevelInfo(categoryData), null, 2))\r\n```'},1221:function(e,n,r){"use strict";r.r(n),n.default='## 判断某一个唯一值是否为最后一层的数据\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * value: 简单数据类型 所要判断属性的值\r\n * uniqueKey:string 所要判断的属性\r\n */\r\nconst isLastLevelKey = (data, value, uniqueKey) => {\r\n  if (Array.isArray(data) && data.length > 0 && value && uniqueKey) {\r\n    let flag = false;\r\n    const deep = innerData => {\r\n      return innerData.some(item => {\r\n        if (item[uniqueKey] === value) {\r\n          if (!item.children || item.children.length === 0) {\r\n            flag = true;\r\n            return true;\r\n          } else {\r\n            return true;\r\n          }\r\n        } else if (item.children && item.children.length > 0) {\r\n          return deep(item.children);\r\n        }\r\n      });\r\n    };\r\n    deep(data);\r\n    return flag;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconsole.log(isLastLevelKey(categoryData, \'3-1-1-1\', \'value\'));\r\n```\r\n'},1222:function(e,n,r){"use strict";r.r(n),n.default='## 获取所有最后一级的数据\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n */\r\nconst getLastLevelData = data => {\r\n  if (Array.isArray(data) && data.length > 0) {\r\n    const newData = [];\r\n    const deep = innerData => {\r\n      innerData.forEach(item => {\r\n        if (Array.isArray(item.children) && item.children.length > 0) {\r\n          deep(item.children);\r\n        } else {\r\n          newData.push(item);\r\n        }\r\n      });\r\n    };\r\n    deep(data);\r\n    return newData;\r\n  } else {\r\n    return [];\r\n  }\r\n}\r\n\r\nconsole.log(getLastLevelData(categoryData));\r\n```'},1223:function(e,n,r){"use strict";r.r(n),n.default='## 为指定的节点添加子节点，添加到子节点的最后(适用于tree节点可以动态添加的情况)\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * parentId 数据所关联的父节点的值\r\n */\r\nconst addTreeNode = (data, parentId) => {\r\n  const newData = []\r\n  data.forEach(item => {\r\n    const obj = { ...item }\r\n    if (item.value === parentId) {\r\n      const newValue = `${parentId}-${obj.children.length + 1}`\r\n      item.children.push({\r\n        label: \'新的节点\',\r\n        value: newValue,\r\n        children: [],\r\n        parentId,\r\n      })\r\n    }\r\n    if (Array.isArray(item.children) && item.children.length > 0) {\r\n      const tempData = addTreeNode(item.children, parentId)\r\n      obj.children = tempData\r\n    }\r\n    newData.push(obj)\r\n  })\r\n  return newData\r\n}\r\n\r\nconsole.log(JSON.stringify(addTreeNode(categoryData, \'3-2\'), null, 2))\r\n```'},1224:function(e,n,r){"use strict";r.r(n),n.default='## 为tree数据添加唯一key属性(key和当前顺序以及层次相关,适用于tree节点可以动态添加或拖拽且key不能重复的情况)\r\n```\r\nconst categoryData = [\r\n  {"label":\'1\',"value":"1","children":[\r\n    {"label":"1-1","value":"1-1","parentId":"1","children":[\r\n      {"label":"1-1-1","value":"1-1-1","parentId":"1-1","children":[]}\r\n    ]}\r\n  ]},\r\n  {"label":\'3\',"value":"3","children":[\r\n    {"label":"3-1","value":"3-1","parentId":"3","children":[\r\n      {"label":"3-1-1","value":"3-1-1","parentId":"3-1","children":[\r\n        {"label":"3-1-1-1","value":"3-1-1-1","parentId":"3-1-1","children":[]}\r\n      ]},\r\n      {"label":"3-1-2","value":"3-1-2","parentId":"3-1","children":[\r\n        {"label":"3-1-2-1","value":"3-1-2-1","parentId":"3-1-2","children":[]}\r\n      ]}\r\n    ]},\r\n    {"label":"3-2","value":"3-2","parentId":"3","children":[]}\r\n  ]},\r\n  {"label":\'2\',"value":"2","children":[\r\n    {"label":"2-1","value":"2-1","parentId":"2","children":[]}\r\n  ]}\r\n];\r\n\r\n/*\r\n * data:array 类目结构的数据，数组内部元素为对象\r\n * parentKey: 当前数据节点的父节点的key\r\n */\r\nconst addUniqueTreeKey = (data, parentKey) => {\r\n  const newData = []\r\n  data.forEach((item, index) => {\r\n    const newKey = parentKey ? `${parentKey}-${index + 1}` : `${index + 1}`\r\n    const obj = { ...item, key: newKey, parentKey: parentKey || null }\r\n    if (Array.isArray(item.children) && item.children.length > 0) {\r\n      const tempData = addUniqueTreeKey(item.children, newKey)\r\n      obj.children = tempData\r\n    }\r\n    newData.push(obj)\r\n  })\r\n  return newData\r\n}\r\n\r\nconsole.log(JSON.stringify(addUniqueTreeKey(categoryData), null, 2))\r\n```'},1225:function(e,n,r){var t=r(1226);"string"==typeof t&&(t=[[e.i,t,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};r(25)(t,a);t.locals&&(e.exports=t.locals)},1226:function(e,n,r){(n=e.exports=r(24)(!1)).push([e.i,".index__category-md--2KNjt {\n  width: 100%;\n}\n.index__category-md--2KNjt .pre-code {\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  cursor: pointer;\n}\n",""]),n.locals={"category-md":"index__category-md--2KNjt"}},1227:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=[{key:"/category/func/generateTree",label:"generateTree"},{key:"/category/func/mapCategoryData",label:"mapCategoryData"},{key:"/category/func/filterCategoryData",label:"filterCategoryData"},{key:"/category/func/deleteAppointData",label:"deleteAppointData"},{key:"/category/func/addTreeNode",label:"addTreeNode"},{key:"/category/func/getAppointLevelCategoryData",label:"getAppointLevelCategoryData"},{key:"/category/func/getAppointLevelAllData",label:"getAppointLevelAllData"},{key:"/category/func/getAllData",label:"getAllData"},{key:"/category/func/findParentId",label:"findParentId"},{key:"/category/func/getLevelCount",label:"getLevelCount"},{key:"/category/func/mapCategoryDataWithLevelInfo",label:"mapCategoryDataWithLevelInfo"},{key:"/category/func/addUniqueTreeKey",label:"addUniqueTreeKey"},{key:"/category/func/isLastLevelKey",label:"isLastLevelKey"},{key:"/category/func/getLastLevelData",label:"getLastLevelData"}]},1320:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var r=arguments[n];for(var t in r)Object.prototype.hasOwnProperty.call(r,t)&&(e[t]=r[t])}return e},a=function(){function e(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n}}(),l=r(1),i=s(l),u=r(72),d=s(r(135)),o=s(r(136)),c=s(r(1208)),p=s(r(1227));function s(e){return e&&e.__esModule?e:{default:e}}function f(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function v(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var h=function(e){function n(){return f(this,n),v(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),a(n,[{key:"render",value:function(){return i.default.createElement(u.Switch,null,i.default.createElement(u.Redirect,{exact:!0,from:"/category",to:"/category/func/generateTree"}),c.default.allScreen.map((function(e,n){return i.default.createElement(o.default,t({key:n},e))})),c.default.partScreen.map((function(e,n){return i.default.createElement(o.default,{key:n,exact:e.exact,path:e.path,routePermission:e.routePermission,render:function(n){return i.default.createElement(d.default,t({},n,{component:e.component,menuConfig:p.default}))}})})),i.default.createElement(u.Redirect,{to:"/category"}))}}]),n}(l.Component);n.default=h},135:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var t=i(r(1)),a=r(994),l=i(r(995));function i(e){return e&&e.__esModule?e:{default:e}}n.default=function(e){var n=e.component,r=e.menuConfig,i=e.defaultOpenKeys,u=void 0===i?[]:i,d=e.hiddenLeftNav,o=function(e,n){var r={};for(var t in e)n.indexOf(t)>=0||Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t]);return r}(e,["component","menuConfig","defaultOpenKeys","hiddenLeftNav"]),c=!(0,a.isPC)()&&d;return t.default.createElement("div",{className:"all-content"},c||t.default.createElement(l.default,{menuConfig:r,defaultOpenKeys:u}),t.default.createElement("div",{className:"right-content"},t.default.createElement(n,o)))}},136:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t,a,l=function(){function e(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n}}(),i=r(1),u=p(i),d=r(96),o=r(72),c=p(r(269));function p(e){return e&&e.__esModule?e:{default:e}}function s(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function f(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var v=(t=(0,d.connect)((function(e){return{isLogin:e.loginStore.isLogin,permission:e.loginStore.permission}}),null),(0,o.withRouter)(a=t(a=function(e){function n(){return s(this,n),f(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),l(n,[{key:"render",value:function(){var e=this.props,n=e.routePermission,r=e.permission,t=!n||"normal"===n||n===r;return e.isLogin&&!r&&"manager"===n?u.default.createElement(c.default,null):t?u.default.createElement(o.Route,this.props):u.default.createElement(o.Redirect,{to:"/nopermission"})}}]),n}(i.Component))||a)||a);n.default=v},994:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.isPC=function(){for(var e=navigator.userAgent,n=["Android","iPhone","ymbianOS","Windows Phone","iPad","iPod"],r=!0,t=0;t<n.length;t++)if(e.indexOf(n[t])>0){r=!1;break}return r}},995:function(e,n,r){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var t,a,l=v(r(138)),i=function(){function e(e,n){for(var r=0;r<n.length;r++){var t=n[r];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(n,r,t){return r&&e(n.prototype,r),t&&e(n,t),n}}();r(405);var u=r(1),d=v(u),o=r(72),c=v(r(137)),p=v(r(998)),s=v(r(996)),f=v(r(44));function v(e){return e&&e.__esModule?e:{default:e}}function h(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}function y(e,n){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!n||"object"!=typeof n&&"function"!=typeof n?e:n}var b=l.default.SubMenu,m=(t=(0,f.default)(s.default),(0,o.withRouter)(a=t(a=function(e){function n(){return h(this,n),y(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function, not "+typeof n);e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),n&&(Object.setPrototypeOf?Object.setPrototypeOf(e,n):e.__proto__=n)}(n,e),i(n,[{key:"render",value:function(){var e=this.props,n=e.location.pathname,r=e.menuConfig,t=e.defaultOpenKeys,a=(r||[]).find((function(e){return(0,p.default)(e.submenu)?n===e.key:e.submenu.find((function(e){return e.key===n}))}));return a=a?(0,p.default)(a.submenu)?a.key:(0,c.default)(a.submenu.find((function(e){return e.key===n})),"key"):"",d.default.createElement("div",{styleName:"left-nav"},d.default.createElement(l.default,{mode:"inline",selectedKeys:[a],defaultOpenKeys:t||[]},(r||[]).map((function(e){return(e.submenu||[]).length>0?d.default.createElement(b,{key:e.key,title:e.label},e.submenu.map((function(e){return d.default.createElement(l.default.Item,{key:e.key},d.default.createElement(o.Link,{to:e.key,title:e.label},e.label))}))):d.default.createElement(l.default.Item,{key:e.key},d.default.createElement(o.Link,{to:e.key,title:e.label},e.label))}))))}}]),n}(u.Component))||a)||a);n.default=m},996:function(e,n,r){var t=r(997);"string"==typeof t&&(t=[[e.i,t,""]]);var a={hmr:!0,transform:void 0,insertInto:void 0};r(25)(t,a);t.locals&&(e.exports=t.locals)},997:function(e,n,r){(n=e.exports=r(24)(!1)).push([e.i,".index__left-nav--pdueK {\n  height: calc(100vh - 49px);\n  overflow-y: auto;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  border-right: 1px solid #eee;\n}\n.index__left-nav--pdueK .ant-menu {\n  width: 256px;\n}\n.index__left-nav--pdueK .ant-menu .ant-menu-item {\n  width: 100% !important;\n}\n.index__left-nav--pdueK .ant-menu .ant-menu-item a {\n  width: 100%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n.index__left-nav--pdueK .ant-menu-inline,\n.index__left-nav--pdueK .ant-menu-vertical,\n.index__left-nav--pdueK .ant-menu-vertical-left {\n  border: none;\n}\n.index__left-nav--pdueK .ant-menu-inline .ant-menu-item,\n.index__left-nav--pdueK .ant-menu-inline .ant-menu-submenu-title {\n  width: 100%;\n}\n@media only screen and (max-width: 700px) {\n  .index__left-nav--pdueK .ant-menu {\n    width: 100px;\n  }\n}\n",""]),n.locals={"left-nav":"index__left-nav--pdueK"}}}]);